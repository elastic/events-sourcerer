name: Main

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

env:
  TEST_VERBOSITY: 2

jobs:
  license-check:
    name: License check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: License check
        run: make license-check

  unit-tests:
    name: Unit tests (${{ matrix.os }}/${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: ["ubuntu-latest", "macos-latest"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make prereq-py

      - name: Lint code
        run: make lint

      - name: Run unit tests
        env:
          TEST_SCHEMA_URI: "./etc/ecs-8.1.0.tar.gz"
          TEST_DETECTION_RULES_URI: "./etc/detection-rules-8.1.0.tar.gz"
        run: make tests

  online-tests:
    name: Online tests (${{ matrix.stack-version }})
    runs-on: "ubuntu-latest"
    needs: unit-tests

    strategy:
      fail-fast: false
      matrix:
        stack-version:
          - 8.4.0
          - 8.3.0
          - 8.2.0
          - 8.1.0
        schema-uri: ["./etc/ecs-8.1.0.tar.gz"]
        detection-rules-uri: ["./etc/detection-rules-8.1.0.tar.gz"]
        signals_queries: [1]
        signals_rules: [1]

        include:
          - stack-version: "7.17.0"
            schema-uri: "./etc/ecs-8.1.0.tar.gz"
            detection-rules-uri: "./etc/detection-rules-8.1.0.tar.gz"
            signals_queries: 1
            signals_rules: 0  # https://github.com/elastic/geneve/issues/28

          - stack-version: "7.16.0"
            schema-uri: "./etc/ecs-8.1.0.tar.gz"
            detection-rules-uri: "./etc/detection-rules-8.1.0.tar.gz"
            signals_queries: 1
            signals_rules: 0  # https://github.com/elastic/geneve/issues/28

          - stack-version: "7.15.0"
            schema-uri: "./etc/ecs-8.1.0.tar.gz"
            detection-rules-uri: "./etc/detection-rules-8.1.0.tar.gz"
            signals_queries: 1
            signals_rules: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: make prereq-py

      - name: Setup cache
        id: elastic-stack-cache
        uses: actions/cache@v2
        with:
          key: elastic-stack-cache-${{ matrix.stack-version }}
          path: ~/elastic-stack-cache

      - name: Reuse Elastic Stack ${{ matrix.stack-version }} Docker images
        if: steps.elastic-stack-cache.outputs.cache-hit == 'true'
        run: |
          docker load -i ~/elastic-stack-cache/elasticsearch-${{ matrix.stack-version }}.tar
          docker load -i ~/elastic-stack-cache/kibana-${{ matrix.stack-version }}.tar

      - name: Pull Elastic Stack ${{ matrix.stack-version }} Docker images
        if: steps.elastic-stack-cache.outputs.cache-hit != 'true'
        env:
          TEST_STACK_VERSION: ${{ matrix.stack-version }}
        run: |
          mkdir ~/elastic-stack-cache
          docker compose pull -q
          docker save -o ~/elastic-stack-cache/elasticsearch-${{ matrix.stack-version }}.tar \
            docker.elastic.co/elasticsearch/elasticsearch:${{ matrix.stack-version }}
          docker save -o ~/elastic-stack-cache/kibana-${{ matrix.stack-version }}.tar \
            docker.elastic.co/kibana/kibana:${{ matrix.stack-version }}

      - name: Start Elastic Stack ${{ matrix.stack-version }}
        env:
          TEST_STACK_VERSION: ${{ matrix.stack-version }}
        run: make up

      - name: Run online tests
        env:
          TEST_SCHEMA_URI: ${{ matrix.schema-uri }}
          TEST_DETECTION_RULES_URI: ${{ matrix.detection-rules-uri }}
          TEST_SIGNALS_QUERIES: ${{ matrix.signals_queries }}
          TEST_SIGNALS_RULES: ${{ matrix.signals_rules }}
          TEST_ELASTICSEARCH_URL: "http://elastic:changeme@localhost:29650"
          TEST_KIBANA_URL: "http://elastic:changeme@localhost:65290"
        run: make online-tests

      - name: Stop Elastic Stack ${{ matrix.stack-version }}
        run: make down

  cli:
    name: CLI (${{ matrix.os }}/${{ matrix.go-version }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.18", "1.19"]
        os: ["ubuntu-latest", "macos-latest"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: make prereq-go

      - name: Build
        run: make cli-build

      - name: Lint
        run: make cli-lint

      - name: Test
        run: make cli-test

  package-build:
    name: Package build (${{ matrix.os }}/${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: ["ubuntu-latest", "macos-latest"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make prereq-py

      - name: Build package
        run: make package

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-${{ matrix.python-version }}-${{ matrix.os }}
          path: dist/geneve-*.whl

  package-tests:
    name: Package tests (${{ matrix.os }}/${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: package-build

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: ["ubuntu-latest", "macos-latest"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: code

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package-${{ matrix.python-version }}-${{ matrix.os }}
          path: dist

      - name: Install package
        run: make -f code/Makefile pkg-install

      - name: Test package
        run: make -f code/Makefile pkg-tests

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - license-check
      - unit-tests
      - online-tests
      - package-tests
      - cli
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package-3.8-ubuntu-latest
          path: dist

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        if: github.repository != 'elastic/geneve'
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          print_hash: true
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        if: github.repository == 'elastic/geneve'
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          print_hash: true
