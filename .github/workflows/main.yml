name: Main

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

env:
  TEST_VERBOSITY: 2

jobs:
  license-checks:
    name: License checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run checks
        run: make license-checks

  unit-tests:
    name: Unit tests (${{ matrix.python-version }}/${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: ["ubuntu-latest", "macos-latest"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make prereq

      - name: Lint code
        run: make lint

      - name: Run unit tests
        env:
          TEST_SCHEMA_URI: "./etc/ecs-8.1.0.tar.gz"
          TEST_DETECTION_RULES_URI: "./etc/detection-rules-8.1.0.tar.gz"
        run: make tests

  online-tests:
    name: Online tests (${{ matrix.stack-version }}/${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: unit-tests

    strategy:
      fail-fast: false
      matrix:
        stack-version: ["8.1.3"]
        schema-uri: ["./etc/ecs-8.1.0.tar.gz"]
        detection-rules-uri: ["./etc/detection-rules-8.1.0.tar.gz"]
        signals_queries: [1]
        signals_rules: [1]
        python-version: ["3.10"]
        os: ["ubuntu-latest"]

        include:
          - stack-version: "7.17.3"
            schema-uri: "./etc/ecs-8.1.0.tar.gz"
            detection-rules-uri: "./etc/detection-rules-8.1.0.tar.gz"
            signals_queries: 1
            signals_rules: 0  # https://github.com/elastic/geneve/issues/28
            python-version: "3.10"
            os: "ubuntu-latest"

          - stack-version: "7.15.0"
            schema-uri: "./etc/ecs-8.1.0.tar.gz"
            detection-rules-uri: "./etc/detection-rules-8.1.0.tar.gz"
            signals_queries: 1
            signals_rules: 1
            python-version: "3.8"
            os: "ubuntu-18.04"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make prereq

      - name: Setup cache
        id: elastic-stack-cache
        uses: actions/cache@v2
        with:
          key: elastic-stack-cache-${{ matrix.stack-version }}
          path: ~/elastic-stack-cache

      - name: Reuse Elastic Stack ${{ matrix.stack-version }} Docker images
        if: steps.elastic-stack-cache.outputs.cache-hit == 'true'
        run: |
          docker load -i ~/elastic-stack-cache/elasticsearch-${{ matrix.stack-version }}.tar
          docker load -i ~/elastic-stack-cache/kibana-${{ matrix.stack-version }}.tar

      - name: Pull Elastic Stack ${{ matrix.stack-version }} Docker images
        if: steps.elastic-stack-cache.outputs.cache-hit != 'true'
        env:
          TEST_STACK_VERSION: ${{ matrix.stack-version }}
        run: |
          mkdir ~/elastic-stack-cache
          make stack-pull
          docker save -o ~/elastic-stack-cache/elasticsearch-${{ matrix.stack-version }}.tar \
            docker.elastic.co/elasticsearch/elasticsearch:${{ matrix.stack-version }}
          docker save -o ~/elastic-stack-cache/kibana-${{ matrix.stack-version }}.tar \
            docker.elastic.co/kibana/kibana:${{ matrix.stack-version }}

      - name: Start Elastic Stack ${{ matrix.stack-version }}
        env:
          TEST_STACK_VERSION: ${{ matrix.stack-version }}
        run: make stack-up

      - name: Run online tests
        env:
          TEST_SCHEMA_URI: ${{ matrix.schema-uri }}
          TEST_DETECTION_RULES_URI: ${{ matrix.detection-rules-uri }}
          TEST_SIGNALS_QUERIES: ${{ matrix.signals_queries }}
          TEST_SIGNALS_RULES: ${{ matrix.signals_rules }}
        run: make online-tests

      - name: Stop Elastic Stack ${{ matrix.stack-version }}
        run: make stack-down

  docker-sanity:
    name: Docker image sanity
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: make prereq

      - name: Build image
        run: make docker-build

      - name: Run sanity checks
        run: make docker-sanity

  package-sanity:
    name: Python package sanity
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: make prereq

      - name: Build package
        run: make pkg-build

      - name: Install package
        run: make pkg-install

      - name: Try package
        run: make pkg-try

  kubernetes-sanity:
    name: Kubernetes sanity
    runs-on: ${{ matrix.os }}
    needs:
      - docker-sanity

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.16"

      - name: Install Kind
        run: |
          go install sigs.k8s.io/kind@latest
          kind version

      - name: Build image
        run: make docker-build

      - name: Create cluster
        run: |
          make kind-up
          kubectl get nodes -o wide
          kubectl get pods -o wide
          kubectl get services -o wide

      - name: Run sanity checks
        run: make sanity-checks

      - name: Destroy Kind cluster
        run: make kind-down

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - license-checks
      - unit-tests
      - online-tests
      - kubernetes-sanity
      - package-sanity
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: make prereq

      - name: Build package
        run: make pkg-build

      - name: Install package
        run: make pkg-install

      - name: Try package
        run: make pkg-try

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        if: github.repository != 'elastic/geneve'
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          print_hash: true
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.5.0
        if: github.repository == 'elastic/geneve'
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          print_hash: true
